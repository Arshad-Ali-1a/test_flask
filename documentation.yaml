openapi: 3.0.0
info:
  title: Book Store API
  version: v1
paths:
  /books:
    get:
      summary: Retrieve a list of all available books in the inventory.
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    author:
                      type: string
                    price:
                      type: number
                    stock:
                      type: integer
                  required:
                    - id
                    - title
                    - author
                    - price
                    - stock
    post:
      summary: Add a new book to the inventory.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                title:
                  type: string
                author:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
              required:
                - id
                - title
                - author
                - price
                - stock
      responses:
        '200':
          description: Book added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  author:
                    type: string
                  price:
                    type: number
                  stock:
                      type: integer
                required:
                  - id
                  - title
                  - author
                  - price
                  - stock
  /books/{book_id}:
    get:
      summary: Retrieve a specific book by its ID.
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to retrieve
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  author:
                    type: string
                  price:
                    type: number
                  stock:
                    type: integer
                required:
                  - id
                  - title
                  - author
                  - price
                  - stock
        '404':
          description: Not found
  /users:
    get:
      summary: Retrieve a list of all available users.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of results to return
      responses:
        '200':
          description: A list of users
    post:
      summary: Create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User created
        '400':
          description: Invalid request data
  /users/{user_id}:
    get:
      summary: Retrieve a specific user by ID.
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: ID of the user to retrieve
      responses:
        '200':
          description: User found
        '404':
          description: Not found
  /login:
    post:
      summary: Log in to the system.
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Username for login
        - in: query
          name: password
          schema:
            type: string
          description: Password for login
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials
  /logout:
    post:
      summary: Log out of the system.
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: Authentication token
      responses:
        '200':
          description: Logged out successfully
  /books/{book_id}/borrow:
    post:
      summary: Borrow a book.
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to borrow
      responses:
        '200':
          description: Book borrowed successfully
        '404':
          description: Book not found
  /books/{book_id}/return:
    post:
      summary: Return a borrowed book.
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to return
      responses:
        '200':
          description: Book returned successfully
        '404':
          description: Book not found
  /users/register:
    post:
      summary: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
              required:
                - username
                - email
      responses:
        '201':
          description: User created
components:
  responses:
    GetUserResponse:
      $ref: '#/components/responses/UserResponse'
    CreateUserResponse:
      $ref: '#/components/responses/UserResponse'
    UserResponse:
      description: The request was successful and the response body contains the requested data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      examples:
        example-user-response:
          value:
            id: 1
            username: bookworm
            email: bookworm@example.com
            purchases: []
    ErrorResponse:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      examples:
        example-error-response:
          value:
            error: User not found
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
      required:
        - id
        - username
        - email
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error
    Purchase:
      type: object
      properties:
        id:
          type: integer
        item_name:
          type: string
        price:
          type: number

